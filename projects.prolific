Create a Redis BOSH Release

### What?
Okay, the training wheels are coming **off**. This BOSH Release is gonna be you + the same docs anyone else uses ("whhaaaaaat?" "I know, they grow up so fast!"). But first, a little preamble:

A BOSH release is a versioned collection of configuration properties, configuration templates, start up scripts, source code, binary artifacts, and anything else required to *build and deploy software in a reproducible way*. Each BOSH VM starts with a [stemcell](http://bosh.io/docs/stemcell.html), and then has utility added to it in the form of releases. Your Redis release might include start-up and shutdown scripts for the redis-server, a tarball with Redis source code obtained from the Redis official website, and configuration properties allowing cluster operators to alter that Redis configuration.

### How?
Follow [these instructions](http://bosh.io/docs/create-release.html) and refer to [this MySQL release](https://github.com/cloudfoundry/cf-mysql-release) as an example. If you get totally stuck, refer to this [community-created Redis release](https://github.com/cloudfoundry-community/redis-boshrelease).

### Expected Result
A BOSH release that facilitates the use of Redis by a CF deployed app.

### Resources
[http://bosh.io/docs/create-release.html](http://bosh.io/docs/create-release.html)
L: bosh

---

Create a Concourse resource

### What?
As we've seen, a [Concourse resource](https://concourse-ci.org/resources.html) can be checked for new versions, used as a trigger when new versions are found, pulled down at a specific version, and pushed up idempotently to create new versions.

There's a whole host of [system resource types](https://concourse-ci.org/resource-types.html) available, but they don't cover every potential use case. It won't be too long till you'll need to create one of your very own.

### How?
Use the **[Concourse documentation](https://concourse-ci.org/implementing-resource-types.html)** to create your own resource. Make liberal use of resource repos on Github to guide you on your path. Your steps will broadly be:

1. Write check / in / out scripts that make sense for your resource.
1. Package in a Docker container and publish to the docker registry.
1. Configure your pipeline to include your new resource type, create an instance of that resource type, and consume that resource.
1. Lots of debugging, with poor feedback mechanisms.

**Debugging Note:** write errors to `stderr` because `stdout` must be only a JSON object.

### Expected Result
A resource that can be used as a trigger for a job in your pipeline.

Some ideas:
* weather alerts (https://openweathermap.org/api)
* stock watch

To date, my favorite combinations of resources/tasks have been:
* an XKCD notifier
* a bot that spammed a Slack channel with vocabulary from a Danish thesaurus

Let's get creative!

### Resources
[Docs / Github : List of resource types and links to their implementation](https://concourse-ci.org/resource-types.html)
L: bosh

---

Make a BOSH release

### What?
Create a BOSH release of an app (e.g.: a simple NginX app or of your choosing )

### Expected Result
Have a VM running your application code on it's own VM released and managed by BOSH, and be able to scale it by editing the YAML.

### Resources
https://bosh.io/docs/create-release.html
https://bosh.io/docs/packages.html
https://starkandwayne.com/blog/your-first-bosh-release/
https://content.pivotal.io/blog/how-to-create-a-bosh-release-of-a-dns-server

---

Make a BOSH Errand

### What?
Create a BOSH errand a task that can be triggered via bosh ( run specific set of tests )

### Expected Result
Be able to run `bosh -d <your cf> errands` and have your errand run.

### Resources
https://bosh.io/docs/errands.html

---

Create a tile to deploy with Ops Manager

### Resources
- https://docs.pivotal.io/tiledev/2-2/
- https://docs.pivotal.io/tiledev/2-2/tile-structure.html
- https://docs.pivotal.io/tiledev/2-2/tile-generator.html

---

Container networking

### What?
Explore how and why of container to container networking.

### Resources
https://github.com/cloudfoundry/cf-networking-notes
https://github.com/cloudfoundry/cf-networking-release
https://docs.cloudfoundry.org/concepts/understand-cf-networking.html
https://docs.cloudfoundry.org/devguide/deploy-apps/cf-networking.html

---

Deploy, scale and tune an app on PWS

### What?

Get to kick the tires as a user of what PWS can offer. Deploy an app, scale it, benchmark it and view it's metrics by using all the tools that PWS puts at your disposal.

1. AppsManager
1. Metrics
1. AutoScaling
1. and more!

---

Deploy CFCR

### What?

Deploy CF flavored Kubernetes, with the aide of BOSH.

### Resources
https://www.cloudfoundry.org/container-runtime/
https://github.com/cloudfoundry/docs-cfcr
https://content.pivotal.io/slides/cloud-foundry-container-runtime-cfcr-production-kubernetes
https://github.com/cloudfoundry-incubator/kubo-release

---

Deploy PKS

### What?

Deploy the Pivotal flavored Kubernetes with the aide of BOSH and Ops Manager

### Caveat
You will need to prepare Ops Manager on GCP differently than you prepare it for PAS.

### Visualizing the Architecture
![pks-architecture](https://docs.pivotal.io/runtimes/pks/1-3/images/pks-overview.png)

Summary of steps
1. Setup Ops Manager and deploy BOSH Director.
2. Partially setup PKS API Load Balancer.
3. Upload PKS tile, configure the tile, and deploy PKS Control Plane VM with some chosen API wildcard domain.
4. After PKS tile is deployed, update the PKS API load balancer with the IP address of the control plane VM that BOSH deployed on GCP.
5. Use `pks` CLI to deploy cluster
6. Use `kubectl` to deploy workload on cluster

You can find very detailed steps to setup everything on GCP [here](https://docs.pivotal.io/runtimes/pks/1-3/gcp-index.html).

Alternatively, if you can't be bothered, toolsmiths provides a [Deploy PKS on GCP](https://environments.toolsmiths.cf-app.com/deploy) pipeline.

### Expected Results
- Setup Ops Manager on GCP
- Configure and deploy PKS tile on Ops Manager
- Use `pks` CLI to create cluster
- Use `kubectl` CLI to deploy workload on cluster

### Resources
- https://pivotal.io/platform/pivotal-container-service
- PCF documentation on PKS: https://docs.pivotal.io/runtimes/pks/1-3/
- Installing pks CLI: https://docs.pivotal.io/runtimes/pks/1-3/installing-pks-cli.html
- Using pks CLI: https://docs.pivotal.io/runtimes/pks/1-3/configure-api.html
- Installing kubectl CLI: https://docs.pivotal.io/runtimes/pks/1-3/installing-kubectl-cli.html

---

Diego cell tuning

### What?
Did you know you could tune up or down Diego cells and affect placement and performance? The platform will allow you to do such things as:
1. overcommiting on memory resources
1. enable or disable end to end encryption between your app and the router (aka route integrity )
1. tune the amount of extra memory that is allocated to a user's container, to allow for such things as envoy and other sidecar processes
1. and more...

### Result
Explore the different knobs that are offered on the Diego BOSH release.

---

Watch some Videos

### What?

Grab a snack from the kitchen and watch some videos! Here's a few suggestions for where to look for videos:

- You can check out all the recordings from previous Cloud Foundry Summits [here](https://www.youtube.com/user/CloudFoundry/playlists).
- Pivotal offices have weekly Tech Talks which they upload [here](https://www.youtube.com/user/goPivotal/playlists)
- Conferences often upload videos after the conference has finished, here's a few to check out:
  - [Goto](https://www.youtube.com/user/GotoConferences/playlists)
  - [Strange Loop](https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw/playlists)
  - [Gophercon](https://www.youtube.com/channel/UCx9QVEApa5BKLw9r8cnOFEA/playlists)
  - [Deconstruct](https://www.deconstructconf.com/2017)

### Standout videos

Here are some videos past participant have enjoyed:
- [Pivotal Cloud Foundry Overview - Onsi Fakhouri](https://www.youtube.com/watch?v=7APZD0me1nU)
- [Enhancing the Routing Tier in CF: Istio and Envoy for Ingress Routing - Aaron Hurley, Pivotal](https://www.youtube.com/watch?v=5f7Bm1-E3nw)
- TODO: Participants add more videos here!

### What's next?

If you found a video you liked, submit a PR to add your video link to [this file](https://github.com/pivotal-cf/onboarding/blob/master/projects.prolific).
Design, product managment, development, or anything else is fair game!

---

Create a Concourse job to create new releases of the Onboarding stories

### What?
This is a chance to practice your Concourse skills and help out the Onboarding facilitation team.

We set up the Tracker projects by building a CSV that we then upload to Tracker. We also periodically upload both versions of that CSV as a Github release, and publish it along with notes on changes to the repository.

You can see what these releases look like in [the releases section of the Onboarding Github repository](https://github.com/pivotal-cf/onboarding/releases)

Right now a human has to create the release, then build and upload these CSVs by hand, but we'd rather do that with a Concourse job.


### Expected Result

What we'd like to see is a Concourse pipeline that:

- Takes in the latest `master` of `pivotal-cf/onboarding`
- Builds both CSVs (oss and local)
- Creates a draft release with these CSVs that points to the commit they were built from

Bonus points if the pipeline:

- Runs automatically every time we commit to master but doesn't fill the repository with draft releases
- Gives us a button that lets us publish the release as well
- Shows us all the commits that were included in the release, to make it easier to write release notes
- Handles incrementing semver for us, and lets us choose whether we're making a breaking, feature, or fix release

### Resources

You'll need to ask a facilitator for 
- credentials to automatically create releases in the `pivotal-cf/onboarding` channel
- credentials to update pipelines in the Wings Onboarding team

You may also want to consult
- Instructions on [building stories from source](Import stories to Tracker (from source))
- [Concourse resources](https://concourse-ci.org/included-resources.html)

---

Dig into terraform

### What?

It can be unclear what is happening underneath bbl. Taking a look at Terraform can clear up some of the mystery.

### How?

You can use [this](https://learn.hashicorp.com/terraform/getting-started/build) to make a simple compute instance.
However, it is specific to AWS, so if you are using GCP, you will have to translate it.
[This](https://www.terraform.io/docs/providers/google/r/compute_instance.html) will be helpful when translating.

### Resources

For more info on how bbl and terraform work together, check out these docs and the rest of the repo:
https://github.com/cloudfoundry/bosh-bootloader/blob/master/docs/index.md

---

[RELEASE] End of week projects, minimal instruction ⇧
